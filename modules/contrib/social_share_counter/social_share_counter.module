<?php
/**
 * @file
 * Module code for Social Share Counter.
 */

use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements of hook_page_attachments().
 */
function social_share_counter_page_attachments(array &$page) {
  $data = social_share_counter_get_options_array();
  if($data['ssc_status'] == 1) {
    $url = _ssc_get_current_page_url();
    $page['#attached']['drupalSettings']['SSC'] = 
      [
        'share' => \Drupal::URL('social_share_counter.share'),
        'page' =>  $url,
      ];
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function social_share_counter_entity_extra_field_info() {
  $extra = array();

  $entity_info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  if (isset($entity_info['node'])) {
    foreach ($entity_info['node'] as $bundle => $bundle_info) {
      $extra['node'][$bundle]['display'] = array(
        'social_share_counter' => array(
          'label' => t('Social Share Counter'),
          'description' => t('Social Share Counter links'),
          'weight' => 10,
        ),
      );
    }
  }
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function social_share_counter_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
// Don't display if the user is currently searching, or in the RSS feed.
  switch ($view_mode) {
    case 'search_result':
    case 'search_index':
    case 'rss':
      return;
  }
  $data = social_share_counter_get_options_array();
  if ($view_mode == 'full' && $display->getComponent('social_share_counter') && $data['ssc_status'] == 1) {
      $build['social_share_counter'] = array(
        '#markup' => _ssc_create_button($node),
        '#attached' => array(
          'library' => array(
            'social_share_counter/social_share_counter',
          ),
        ),
      );
  }
}
/**
 * Internal function to generate code for Social Share Counter buttons.
 *
 * @param object $node
 *   Optional parameter
 *
 * @return string
 *   String containing HTML code for the buttons
 */
function _ssc_create_button($node=NULL) {
  global $_ssc_num, $base_url;

  $_ssc_num++;
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  if (is_object($node)) {
    $path = $node->urlInfo()->getInternalPath();
    $path_obj = Url::fromUri($base_url . 'node/' . $path, array('absolute' => TRUE));
    $link_url = $path_obj->toString();
  }
  else {
    $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
    if ($is_front) {
      $path = "<front>";
    }
    $link_url = Url::fromUri($path, array('absolute' => TRUE))->toString();
  }
  
  $site_name = \Drupal::config('system.site')->get('name');

  if ($is_front) {
    $title = $site_name;
  }
  else {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    // Expecting array|string|null from getTitle
    if (is_array($title)) {
      $title['#allowed_tags'] = array();
      $title = \Drupal::service('renderer')->renderPlain($title);
    }
  }

  $title = (empty($title)) ? $site_name : $title;
  $link_name = Html::escape($title);

  $data = social_share_counter_get_options_array();
  $data['title'] = $link_name;
  $data['link_url'] = $link_url;
  $data['link_url'] = 'https://drupal.org';
  $rendered_array = array(
    '#theme' => 'social_share_counter_button',
    '#social_share_counter_data' => $data,
  );
  return drupal_render($rendered_array);
}

function _ssc_get_current_page_url() {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  $url = ($is_front) ? Url::fromRoute('<front>')->setAbsolute()->toString() : Url::fromRoute('<current>')->setAbsolute()->toString();
  return $url;
}
/**
 * Implements hook_theme().
 */
function social_share_counter_theme($existing, $type, $theme, $path) {
  return array(
    'social_share_counter_button' => array(
      'variables' => array('social_share_counter_data' => NULL,),
    ),
  );
}

/**
 * Function to parse real time counter request.
 */
function _social_share_counter_parse($enc_url) {
  $options = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_HEADER => FALSE,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_ENCODING => "",
    CURLOPT_USERAGENT => 'sharrre',
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_CONNECTTIMEOUT => 5,
    CURLOPT_TIMEOUT => 10,
    CURLOPT_MAXREDIRS => 3,
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => FALSE,
  );
  $ch = curl_init();

  $options[CURLOPT_URL] = $enc_url;
  curl_setopt_array($ch, $options);

  $content = curl_exec($ch);
  $err = curl_errno($ch);
  $errmsg = curl_error($ch);

  curl_close($ch);

  if ($errmsg != '' || $err != '') {
    /*print_r($errmsg);
    print_r($errmsg);*/
  }
  return $content;
}

/**
 * A helper function for DB access.
 *
 * Returns options that have been stored in the database.
 *
 */
function social_share_counter_get_options_array() {
  $config = \Drupal::config('social_share_counter.settings');
  $data['ssc_status'] = $config->get('ssc_status');
  $data['button_text'] = array(
    'facebook' => $config->get('ssc_facebook_button_text'),
    'twitter' => $config->get('ssc_facebook_twitter_text'),
  );
  $data['ssc_min_to_show'] = $config->get('ssc_min_to_show');
  $data['count_text'] = $config->get('ssc_text_below_count');
  $data['via'] = $config->get('site_name');
  return $data;
}
